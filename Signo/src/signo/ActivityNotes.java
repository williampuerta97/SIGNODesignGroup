/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package signo;

import java.awt.event.ItemEvent;
import java.sql.ResultSet;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Grupo dise√±o
 */
public class ActivityNotes extends javax.swing.JInternalFrame {

    /**
     * Creates new form NotasXActividades
     */
    Connection con;
    DefaultTableModel model;
    DefaultComboBoxModel model1, model2;
    String idGroup [], idSubject[], idAchivement[], idActivity[];
    String title[] = {"Nuip", "Nombres y apellidos", "Nota"};
    TableColumnModel columnModel;
    public ActivityNotes() {
        initComponents();
        con = new Connection();
        loadGroup(Main.id);
        disableCombo();
        loadTeacher(Main.id);
        columnModel = tbData.getColumnModel();
        model = new DefaultTableModel(null, title);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbData = new javax.swing.JTable();
        cboGroup = new javax.swing.JComboBox();
        cboAchievements = new javax.swing.JComboBox();
        cboActivity = new javax.swing.JComboBox();
        btnRegister = new javax.swing.JButton();
        lbTeachers = new javax.swing.JLabel();
        cboSubjects = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Notas por actividad");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel1.setText("Docente");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel2.setText("Grupo");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel3.setText("Materia");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel5.setText("Logro");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel6.setText("Actividades");

        tbData.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tbData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tbData);

        cboGroup.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboGroupItemStateChanged(evt);
            }
        });
        cboGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboGroupActionPerformed(evt);
            }
        });

        cboAchievements.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        cboAchievements.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboAchievementsItemStateChanged(evt);
            }
        });

        cboActivity.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        cboActivity.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboActivityItemStateChanged(evt);
            }
        });

        btnRegister.setText("REGISTRAR");
        btnRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterActionPerformed(evt);
            }
        });

        lbTeachers.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N

        cboSubjects.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboSubjectsItemStateChanged(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel7.setText("Buscar:");

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnRegister)
                .addGap(172, 172, 172))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(jLabel3)
                        .addGap(69, 69, 69)
                        .addComponent(cboSubjects, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(jLabel5)
                        .addGap(80, 80, 80)
                        .addComponent(cboAchievements, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel10))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabel4)
                        .addGap(52, 52, 52)
                        .addComponent(jLabel6)
                        .addGap(48, 48, 48)
                        .addComponent(cboActivity, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel9))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addComponent(jLabel7)
                        .addGap(43, 43, 43)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(66, 66, 66)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(cboGroup, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel8))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(3, 3, 3)
                                        .addComponent(jLabel2))
                                    .addComponent(cboGroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(36, 36, 36)
                                .addComponent(jLabel3))
                            .addComponent(cboSubjects, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addComponent(jLabel5))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cboAchievements, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10)))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel4))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel6))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cboActivity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel9)))
                .addGap(31, 31, 31)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                .addComponent(btnRegister)
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterActionPerformed
        int count = tbData.getRowCount();
        System.out.println(""+count);
        String rank = "";
        if(jLabel6.isVisible() && cboActivity.isVisible()){
            try {                
                System.out.println("FLAG 1");
                for (int i = 0; i < count; i++) {
                String grade = (String) model.getValueAt(i, 2);                                       
                    System.out.println("FLAG 2 "+i+" nota: "+grade);
                int pos = cboActivity.getSelectedIndex();          
               if(grade.equals("")){   

                  System.out.println("Aqui entra ");  
                  con.modifyDB("INSERT INTO Nota_Actividad VALUES "
                          + "(null, 0, "+model.getValueAt(i, 0)+", "+idActivity[pos]+", 'B')");
                }else {  
                    System.out.println("FLAG 3");
                  double num = Double.parseDouble(grade);
                  rank = assignRank(num);
                  System.out.println("nota: "+num);
                                    
                  con.modifyDB("INSERT INTO Nota_Actividad VALUES "
                          + "(null, "+tbData.getValueAt(i, 2)+", "+tbData.getValueAt(i, 0)+", "+idActivity[pos]+", '"+rank+"')");  
                }  
                }
            } catch (Exception e) {
            }
        }else{
             try {
                for (int i = 0; i < count; i++) {                    
                  String grade = (String) model.getValueAt(i, 2);     
                  int pos = cboAchievements.getSelectedIndex();
                if(grade.equals("")){
                  con.modifyDB("INSERT INTO Nota_Logro VALUES "
                          + "(null, 0, "+idAchivement[pos]+", "+tbData.getValueAt(i, 0)+", 'B')");
                }else {
                      double num = Double.parseDouble(grade);
                      rank = assignRank(num); 
                    System.out.println("Aqui entra 2");                                               
                  con.modifyDB("INSERT INTO Nota_Logro VALUES "
                          + "(null, "+tbData.getValueAt(i, 2)+", "+idAchivement[pos]+", "+tbData.getValueAt(i, 0)+",'"+rank+"');");  
                }  
                }
            } catch (Exception e) {
            }
        }
                
    }//GEN-LAST:event_btnRegisterActionPerformed

    private void cboGroupItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboGroupItemStateChanged
        if(cboGroup.getSelectedIndex() > 0){
            cboSubjects.setEnabled(true);
            jLabel6.setVisible(false);
            cboActivity.setVisible(false);
            int pos = cboGroup.getSelectedIndex();
            loadSubjects(idGroup[pos]);        
        }else if(cboGroup.getSelectedIndex() == 0){
            disableCombo();    
            cboSubjects.removeAllItems();
            cboAchievements.removeAllItems();
            cboActivity.removeAllItems();            
        }            
    }//GEN-LAST:event_cboGroupItemStateChanged

    private void cboGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboGroupActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboGroupActionPerformed

    private void cboSubjectsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboSubjectsItemStateChanged
        if(cboSubjects.getSelectedIndex() > 0){
            int pos = cboSubjects.getSelectedIndex();
            loadAchievements(idSubject[pos]);
            cboAchievements.setEnabled(true);
        }else if(cboSubjects.getSelectedIndex() == 0){
            cboAchievements.setEnabled(false);
            cboActivity.setEnabled(false);
            cboAchievements.removeAllItems();
            cboActivity.removeAllItems();            
        }
    }//GEN-LAST:event_cboSubjectsItemStateChanged

    private void cboAchievementsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboAchievementsItemStateChanged
        if(cboAchievements.getSelectedIndex() > 0){
            int pos = cboAchievements.getSelectedIndex();
            jLabel6.setVisible(true);
            cboActivity.setVisible(true);
            cboActivity.setEnabled(true);
            loadActivity(idAchivement[pos]);
        }else if(cboAchievements.getSelectedIndex() == 0){                                   
            cboActivity.removeAllItems();
            cboActivity.setEnabled(false);
            cboActivity.setVisible(false);
            jLabel6.setVisible(false);
        }       
    }//GEN-LAST:event_cboAchievementsItemStateChanged

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
//            String value = txtSearch.getText();
//            String id = jLabel9.getText();
//            loadTableActivity(value, id);
    }//GEN-LAST:event_txtSearchKeyReleased

    private void cboActivityItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboActivityItemStateChanged
        if(cboActivity.getSelectedIndex() > 0){
            int pos = cboActivity.getSelectedIndex();
            loadTableActivity(idActivity[pos]);
        }    
    }//GEN-LAST:event_cboActivityItemStateChanged
void loadGroup(int code){
    try {
        ResultSet rs = con.consultDB("SELECT count(*) conteo FROM grupo"
                + " INNER JOIN docente_materia_grupo as dmg "
                + "ON grupo.idGrupo = dmg.Grupo_id WHERE dmg.Docente_id = "+code
                + " GROUP BY dmg.Grupo_id");
        if(rs.next()){
            int num = rs.getInt("conteo");
            idGroup = new String[num+1];            
        }
    } catch (Exception e) {
    }
    cboGroup.removeAllItems();
    try {
        int i = 1;
         ResultSet resul = con.consultDB("SELECT idGrupo, Nombre FROM grupo " +
            "INNER JOIN Docente_Materia_Grupo as dmg " +
            "ON grupo.idGrupo = dmg.Grupo_id " +
            "WHERE dmg.Docente_id = "+code +" GROUP BY dmg.Grupo_id");
         model1 = new DefaultComboBoxModel();
         cboGroup.setModel(model1);
         model1.addElement("Seleccione un grado");
        while(resul.next()){           
            model1.addElement(resul.getString("Nombre"));
            idGroup[i] = resul.getString("idGrupo");
            i++;            
        }
    } catch (Exception e) {
    }
}

void loadSubjects(String value){
    try {
        ResultSet rs = con.consultDB("SELECT count(*) conteo "
                + "FROM materia mat, docente_materia_grupo dmg "
                + "WHERE mat.idMateria = dmg.Materia_id AND dmg.Grupo_id = "+value);
        if(rs.next()){
            int num = rs.getInt("conteo");
            idSubject = new String[num+1];
        }
    } catch (Exception e) {
    }
    cboSubjects.removeAllItems();
    int i = 1;
    try {
         ResultSet rs = con.consultDB("SELECT mat.idMateria, mat.Nombre "
            + "FROM materia as mat "
            + "INNER JOIN Docente_Materia_Grupo as dmg "
            + "ON mat.idMateria = dmg.Materia_id "
            + "INNER JOIN grupo as gru "
            + "ON dmg.Grupo_id = gru.idGrupo "
            + "WHERE gru.idGrupo = "+value);      
         model2 = new DefaultComboBoxModel();
         cboSubjects.setModel(model2);
         model2.addElement("Seleccione una materia");
        while(rs.next()){
            model2.addElement(rs.getString("Nombre"));
            idSubject[i] = rs.getString("mat.idMateria");
            i++;
        }
        
    } catch (Exception e) {
    }
}

void loadAchievements(String value){
    cboAchievements.removeAllItems();
    try {
        ResultSet rs = con.consultDB("SELECT COUNT(*) conteo FROM logro as log "
                + "INNER JOIN materia as mat "
                + "ON log.Materia_id = mat.idMateria "
                + "WHERE mat.idMateria = "+value);
        if(rs.next()){
            int num = rs.getInt("conteo");
            idAchivement = new String[num+1];
        }
    } catch (Exception e) {
    }
    int i = 1;
    try {
        ResultSet rs = con.consultDB("SELECT logro.Nombre, logro.idLogro FROM logro, materia "
                + "WHERE logro.Materia_id = materia.idMateria AND " 
                + " materia.idMateria = "+value);
        cboAchievements.addItem("Seleccione un logro");
        while(rs.next()){
            cboAchievements.addItem(rs.getString("logro.Nombre"));
            idAchivement[i] = rs.getString("logro.idLogro");
            System.out.println(idAchivement[i] + " logro");
            i++;
        }
    } catch (Exception e) {
    }
}

void loadActivity(String value){
    cboActivity.removeAllItems();
    try {
        ResultSet rs = con.consultDB("SELECT COUNT(*) conteo FROM actividad as act "
                + "INNER JOIN logro as log "
                + "ON act.Logro_id = log.idLogro "
                + "WHERE act.Logro_id = "+value);
        if(rs.next()){
            int num = rs.getInt("conteo");
            idActivity = new String[num+1];
        }
    } catch (Exception e) {
    }
    int i = 1;
    try {
        ResultSet rs = con.consultDB("SELECT actividad.idActividad, actividad.Nombre FROM actividad, logro "
                + "WHERE actividad.Logro_id = logro.idLogro AND "
                + "logro.idLogro = "+value);
        cboActivity.addItem("Seleccione una actividad");
            if(rs.next()){
                rs.beforeFirst();
                while(rs.next()){                               
                    cboActivity.addItem(rs.getString("actividad.Nombre"));
                    idActivity[i] = rs.getString("actividad.idActividad");
                    System.out.println(idActivity[i] + " actividad pro");
                    i++;
                }
            }else{
                jLabel6.setVisible(false);
                cboActivity.setVisible(false);
            }
            
    } catch (Exception e) {
    }
}

void loadTableActivity(String id){   
    String reg[] = new String[3];    
 model.setRowCount(0);
 int pos = cboGroup.getSelectedIndex();
    try {
        ResultSet rs = con.consultDB("SELECT usu.NUIP, CONCAT(usu.PrimerApellido, ' ', usu.PrimerNombre) Nombre, na.Calificacion FROM usuario as usu \n" +
"INNER JOIN estudiante as est\n" +
"ON usu.NUIP = est.Codigo\n" +
"LEFT JOIN grupo as gru\n" +
"ON est.Grupo_Id = gru.idGrupo\n" +
"INNER JOIN actividad as act\n" +
"ON gru.idGrupo = act.Grupo_id\n" +
"LEFT JOIN nota_actividad as na\n" +
"ON est.Codigo = na.Estudiante_Codigo\n" +
"WHERE gru.idGrupo = "+idGroup[pos]+" AND act.idActividad = "+id+"\n" +
"GROUP BY usu.NUIP");
        
        while(rs.next()){
            reg[0] = rs.getString("usu.NUIP");
            reg[1] = rs.getString("Nombre");
            reg[2] = rs.getString("na.Calificacion");
            
            model.addRow(reg);
        }
        tbData.setModel(model);
        columnModel.getColumn(2).setPreferredWidth(5);
        columnModel.getColumn(0).setPreferredWidth(20);
    } catch (Exception e) {
    }
 
}
void disableCombo(){
    cboSubjects.setEnabled(false);
    cboAchievements.setEnabled(false);
    cboActivity.setVisible(false);
    jLabel6.setVisible(false);
}

void loadTeacher(int id){
    try {
        ResultSet rs = con.consultDB("SELECT CONCAT(PrimerNombre, ' ',"
                + " SegundoNombre, ' ', PrimerApellido, ' ', SegundoApellido ) Nombre "
                + "FROM Usuario WHERE NUIP = "+id);
        if(rs.next()){
            jLabel8.setText(rs.getString("Nombre"));
        }
    } catch (Exception e) {
    }
}

String assignRank(double grade){
    String rank = "";
    if((grade >= 0) && (grade <= 2.5)){
        rank = "B";
        System.out.println("1");
    }else if((grade >= 2.6) && (grade < 3.5)){
        rank = "M";
        System.out.println("2");
    }else {
        rank = "A";
        System.out.println("3");
    }
    
    return rank;
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRegister;
    private javax.swing.JComboBox cboAchievements;
    private javax.swing.JComboBox cboActivity;
    private javax.swing.JComboBox cboGroup;
    private javax.swing.JComboBox<String> cboSubjects;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbTeachers;
    private javax.swing.JTable tbData;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
