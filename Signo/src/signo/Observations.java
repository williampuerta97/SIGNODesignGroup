/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package signo;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author unicuces
 */
public class Observations extends javax.swing.JInternalFrame {

    /**
     * Creates new form proyecto
     */
    Connection con;
    DefaultComboBoxModel model1, model2, model3;
    DefaultTableModel tbModel1, tbModel2;
    DecimalFormat format;
    String idGroup[];
    String idSubjects[];
    String idPeriod[];

    public Observations() {
        initComponents();
        con = new Connection();
        loadTables("", null);
        loadGroup(Main.id);
        disableCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lbTeachers = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbData = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbObservations = new javax.swing.JTable();
        btnSave = new javax.swing.JButton();
        cboCourse = new javax.swing.JComboBox<String>();
        cboSubjects = new javax.swing.JComboBox<String>();
        cboPeriod = new javax.swing.JComboBox<String>();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Definitiva estudiantes");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel1.setText("Docente");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel2.setText("Grado");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel3.setText("Materia");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel4.setText("Periodo");

        lbTeachers.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N

        tbData.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tbData.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tbData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tbData);

        tbObservations.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tbObservations.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tbObservations);

        btnSave.setText("GUARDAR");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        cboCourse.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboCourseItemStateChanged(evt);
            }
        });

        cboSubjects.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboSubjectsItemStateChanged(evt);
            }
        });

        cboPeriod.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboPeriodItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(54, 54, 54)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cboCourse, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lbTeachers, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                            .addComponent(cboSubjects, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cboPeriod, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(203, 203, 203)
                .addComponent(btnSave)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(lbTeachers, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2))
                            .addComponent(cboCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addComponent(jLabel3))
                    .addComponent(cboSubjects, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(cboPeriod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnSave)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cboCourseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboCourseItemStateChanged
        if (cboCourse.getSelectedIndex() > 0) {
            int group = cboCourse.getSelectedIndex();
            cboSubjects.setEnabled(true);
            loadSubjects(idGroup[group]);
        } else if (cboCourse.getSelectedIndex() == 0) {
            loadTables("", null);
            cboSubjects.removeAllItems();
            cboPeriod.removeAllItems();
            disableCombo();
        }
    }//GEN-LAST:event_cboCourseItemStateChanged

    private void cboSubjectsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboSubjectsItemStateChanged
        String subject = (String) cboSubjects.getSelectedItem();
        loadPeriod();
        loadTables("", null);
        cboPeriod.setEnabled(true);
    }//GEN-LAST:event_cboSubjectsItemStateChanged

    private void cboPeriodItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboPeriodItemStateChanged
        if (cboPeriod.getSelectedIndex() > 0) {
            int subject = cboSubjects.getSelectedIndex();
            int period = cboPeriod.getSelectedIndex();
            tbObservations.setVisible(true);
            tbData.setVisible(true);
            tbData.setEnabled(false);
            loadTables(idPeriod[period], idSubjects[subject]);
        } else if (cboPeriod.getSelectedIndex() == 0) {
            tbObservations.setVisible(false);
            tbData.setVisible(false);
        }
    }//GEN-LAST:event_cboPeriodItemStateChanged

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed

        int idSubj = Integer.parseInt(idSubjects[cboSubjects.getSelectedIndex()]);
        int idPer = Integer.parseInt(idPeriod[cboPeriod.getSelectedIndex()]);
        String rank = "";
        String observation = "";

        int codeStudent = 0;
        double grade = 0.0;
        int column = tbData.getColumnCount() - 1;

        /*try {
                   + "WHERE mat.idMateria = " + idSubjects[idSubj] + " AND per.idperiodo = " + idPeriod[idPer] + " ");
            while (query.next()) {
                idSubject = Integer.parseInt(query.getString("mat.idMateria"));
                idPeriod = Integer.parseInt(query.getString("per.idperiodo"));
            } ResultSet query = con.consultDB("SELECT mat.idMateria, per.idperiodo FROM materia as mat, periodo as per  "
            
        } catch (Exception e) {
        }*/
        for (int i = 0; i < tbData.getRowCount(); i++) {
            codeStudent = Integer.parseInt((String) tbData.getValueAt(i, 0));
            grade = Double.parseDouble((String) tbData.getValueAt(i, column));
            rank = assingRank(grade);
            observation = (String) tbObservations.getValueAt(i, 0);

            con.modifyDB("INSERT INTO nota_materia_periodo VALUES "
                    + "( NULL ," + grade + ",'" + rank + "','" + observation + "',"
                    + codeStudent + "," + idPer + "," + idSubj + ")");
        }

    }//GEN-LAST:event_btnSaveActionPerformed

    void loadGroup(int code) {
        try {
            ResultSet rs = con.consultDB("SELECT CONCAT(usu.PrimerNombre,' ',usu.SegundoNombre,' ',"
                    + "usu.PrimerApellido,' ',usu.SegundoApellido) as nomDoc,"
                    + "COUNT(*) grupos FROM grupo "
                    + "INNER JOIN docente_materia_grupo as dmg "
                    + "ON grupo.idGrupo = dmg.Grupo_id "
                    + "INNER JOIN docente as doc "
                    + "ON doc.Codigo = dmg.Docente_id "
                    + "INNER JOIN usuario as usu "
                    + "ON usu.NUIP = doc.Codigo "
                    + "WHERE dmg.Docente_id = " + code + " "
                    + "GROUP BY dmg.Grupo_id");
            model1 = new DefaultComboBoxModel();
            cboCourse.setModel(model1);
            model1.addElement("Seleccione un grado");
            while (rs.next()) {
                int groups = rs.getInt("grupos");
                idGroup = new String[groups + 1];
                lbTeachers.setText(rs.getString("nomDoc"));
            }
        } catch (Exception e) {
        }

        try {
            int i = 1;
            ResultSet rst = con.consultDB("SELECT idGrupo, Nombre FROM grupo "
                    + "INNER JOIN docente_materia_grupo as dmg "
                    + "ON grupo.idGrupo = dmg.Grupo_id "
                    + "WHERE dmg.Docente_id = " + code + " "
                    + "GROUP BY dmg.Grupo_id");
            model1 = new DefaultComboBoxModel();
            cboCourse.setModel(model1);
            model1.addElement("Seleccione un grado");
            while (rst.next()) {
                model1.addElement(rst.getString("Nombre"));
                idGroup[i] = rst.getString("idGrupo");
                i++;
            }
        } catch (Exception e) {
        }
    }

    void loadSubjects(String value) {
        try {
            ResultSet rs = con.consultDB("SELECT COUNT(*) cantidad "
                    + "FROM materia as mat \n"
                    + "INNER JOIN docente_materia_grupo as dmg "
                    + "ON mat.idMateria = dmg.Materia_id "
                    + "INNER JOIN grupo as gru "
                    + "ON dmg.Grupo_id = gru.idGrupo "
                    + "WHERE gru.idGrupo = " + value);
            model2 = new DefaultComboBoxModel();
            while (rs.next()) {
                int subjects = rs.getInt("cantidad");
                idSubjects = new String[subjects];
            }
        } catch (Exception e) {
        }
        cboSubjects.removeAllItems();
        try {
            int i = 0;
            ResultSet rst = con.consultDB("SELECT  mat.idMateria, mat.Nombre "
                    + "FROM materia as mat "
                    + "INNER JOIN docente_materia_grupo as dmg "
                    + "ON mat.idMateria = dmg.Materia_id "
                    + "INNER JOIN grupo as gru "
                    + "ON dmg.Grupo_id = gru.idGrupo "
                    + "WHERE gru.idGrupo = " + value);
            model2 = new DefaultComboBoxModel();
            while (rst.next()) {
                model2.addElement(rst.getString("mat.Nombre"));
                idSubjects[i] = rst.getString("mat.idMateria");
                i++;
            }
            cboSubjects.setModel(model2);

        } catch (Exception e) {
        }
    }

    void loadPeriod() {
        try {
            ResultSet rs = con.consultDB("SELECT COUNT(*) cantidad FROM periodo ");
            model3 = new DefaultComboBoxModel();
            model3.addElement("Seleccione el periodo");
            cboPeriod.setModel(model3);
            while (rs.next()) {
                int period = rs.getInt("cantidad");
                idPeriod = new String[period + 1];
            }
        } catch (Exception e) {
        }
        try {
            int i = 1;
            ResultSet rst = con.consultDB("SELECT idperiodo, Nombre FROM periodo ");
            cboPeriod.setModel(model3);
            while (rst.next()) {
                model3.addElement(rst.getString("Nombre"));
                idPeriod[i] = rst.getString("idPeriodo");
                i++;
            }
        } catch (Exception e) {
        }
    }

    public String assingRank(double grade) {
        String rank = "";
        if ((grade >= 0) && (grade < 2.5)) {
            rank = "B";
        } else if ((grade >= 2.6) && (grade < 3.5)) {
            rank = "M";
        } else {
            rank = "A";
        }
        return rank;
    }

    void loadTables(String value, String value2) {
        if (value2 == null) {
            String title[] = {"NUIP", "Nombre", "Logro 1", "Definitiva"};
            tbModel1 = new DefaultTableModel(null, title);
            tbData.setModel(tbModel1);

            String title2[] = {"Observaciones"};
            tbModel2 = new DefaultTableModel(null, title2);
            tbObservations.setModel(tbModel2);
        }
        if (value2 != null) {
            int i = 1;
            try {
                ResultSet query = con.consultDB("SELECT COUNT(log.idLogro) as cantidad "
                        + "FROM logro as log "
                        + "INNER JOIN periodo as per "
                        + "ON per.idperiodo = log.periodo_id "
                        + "INNER JOIN materia as mat "
                        + "ON mat.idMateria = log.Materia_id "
                        + "WHERE per.idperiodo = " + value + " "
                        + "AND mat.idMateria = " + value2);
                while (query.next()) {
                    if (Integer.parseInt(query.getString("cantidad")) > 0) {
                        i = Integer.parseInt(query.getString("cantidad"));
                    }
                }
            } catch (SQLException ex) {
            }

            String title[] = new String[3 + i];

            for (int j = 0; j < title.length; j++) {
                if (j == 0) {
                    title[j] = "NUIP";
                }

                if (j == 1) {
                    title[j] = "Nombre";
                }
                if ((j > 1) && (j < title.length - 1)) {
                    for (int k = 0; k < i; k++) {
                        title[j] = "Logro " + (k + 1);
                        j++;
                    }
                }
                if (j == title.length - 1) {
                    title[j] = "Definitiva";
                }
            }

            tbModel1 = new DefaultTableModel(null, title);
            tbData.setModel(tbModel1);

            String reg[] = new String[title.length];
            try {
                int j = 2;
                ResultSet rst = con.consultDB("SELECT log.Nombre "
                        + "FROM logro as log "
                        + "INNER JOIN periodo as per "
                        + "ON per.idperiodo = log.periodo_id "
                        + "INNER JOIN nota_logro as ntl "
                        + "ON log.idLogro = ntl.Logro_id "
                        + "INNER JOIN materia as mat "
                        + "ON log.Materia_id = mat.idMateria "
                        + "INNER JOIN estudiante as est "
                        + "ON est.Codigo = ntl.Estudiante_Codigo "
                        + "INNER JOIN usuario as usu "
                        + "ON usu.NUIP = est.Codigo "
                        + "WHERE per.idperiodo = " + value + " "
                        + "AND mat.idMateria = " + value2 + " "
                        + "GROUP BY log.idLogro "
                );
                while (rst.next()) {
                    if ((j > 1) && (j < reg.length - 1)) {
                        reg[j] = rst.getString("log.Nombre");
                        j++;
                    }
                }
                tbData.setModel(tbModel1);
            } catch (Exception e) {
            }
            try {
                ResultSet rs = con.consultDB("SELECT usu.NUIP as Nuip, "
                        + "CONCAT(usu.PrimerApellido,' ',usu.PrimerNombre) as Nombre, "
                        + "FORMAT(AVG(ntl.Calificacion),1) as Definitiva "
                        + "FROM logro as log "
                        + "INNER JOIN periodo as per "
                        + "ON per.idperiodo = log.periodo_id "
                        + "INNER JOIN nota_logro as ntl "
                        + "ON log.idLogro = ntl.Logro_id "
                        + "INNER JOIN materia as mat "
                        + "ON log.Materia_id = mat.idMateria "
                        + "INNER JOIN estudiante as est "
                        + "ON est.Codigo = ntl.Estudiante_Codigo "
                        + "INNER JOIN usuario as usu "
                        + "ON usu.NUIP = est.Codigo "
                        + "WHERE per.idperiodo = " + value + " "
                        + "AND mat.idMateria = " + value2 + " "
                        + "GROUP BY usu.NUIP "
                );

                while (rs.next()) {
                    format = new DecimalFormat("#.0");
                    reg[0] = rs.getString("Nuip");
                    reg[1] = rs.getString("Nombre");

                    double grade = rs.getDouble("Definitiva");
                    reg[reg.length - 1] = "" + grade;
                    tbModel1.addRow(reg);
                }

            } catch (Exception e) {
            }

            /*
             Cargar Tabla Observaciones
             */
            int obs = 0;
            String title2[] = {"Observaciones"};
            tbModel2 = new DefaultTableModel(null, title2);
            try {
                ResultSet query = con.consultDB("SELECT COUNT(Observacion) as cantidad FROM nota_materia_periodo "
                        + "WHERE Periodo_id = " + value + " "
                        + "AND Materia_id = " + value2);
                while (query.next()) {
                    if (Integer.parseInt(query.getString("cantidad")) > 0) {
                        obs = Integer.parseInt(query.getString("cantidad"));
                    }
                }
            } catch (Exception e) {
            }
            String reg2[] = new String[1];
            if (obs == 0) {
                int countRow = tbData.getRowCount();
                tbModel2.setRowCount(countRow);
                tbObservations.setModel(tbModel2);
            } else if (obs > 0 && obs != 1) {
                int countRow = tbData.getRowCount();
                tbModel2.setRowCount(countRow);
                int j = 0;
                try {
                    ResultSet rs = con.consultDB("SELECT COUNT(est.Codigo), nmp.Observacion "
                            + "FROM estudiante as est "
                            + "LEFT JOIN nota_materia_periodo as nmp "
                            + "ON est.Codigo = nmp.Estudiante_Codigo "
                            + "WHERE nmp.Periodo_id = " + value + " "
                            + "And nmp.Materia_id = " + value2 + " "
                            + "or nmp.Materia_id is null "
                            + "group by  est.Codigo "
                            + "order by est.Codigo");

                    while (rs.next()) {
                        reg2[0] = rs.getString("nmp.Observacion");
                        tbModel2.setValueAt(reg2[0], j, 0);
                        j++;
                    }
                    tbObservations.setModel(tbModel2);
                } catch (Exception e) {
                }
            } else if (obs == 1) {
                int countRow = tbData.getRowCount();
                tbModel2.setRowCount(countRow);
                int j = 0;
                try {
                    ResultSet rs = con.consultDB("SELECT COUNT(est.Codigo), nmp.Observacion "
                            + "FROM estudiante as est "
                            + "RIGHT JOIN nota_materia_periodo as nmp "
                            + "ON est.Codigo = nmp.Estudiante_Codigo "
                            + "WHERE nmp.Periodo_id = " + value + " "
                            + "And nmp.Materia_id = " + value2 + " "
                            + "or nmp.Materia_id is null "
                            + "group by  nmp.Observacion "
                            + "order by est.Codigo");

                    while (rs.next()) {
                        reg2[0] = rs.getString("nmp.Observacion");
                        tbModel2.setValueAt(reg2[0], j, 0);
                        j++;
                    }
                    tbObservations.setModel(tbModel2);
                } catch (Exception e) {
                }
            }

        }
    }

    void disableCombo() {
        cboSubjects.setEnabled(false);
        cboPeriod.setEnabled(false);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox<String> cboCourse;
    private javax.swing.JComboBox<String> cboPeriod;
    private javax.swing.JComboBox<String> cboSubjects;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbTeachers;
    private javax.swing.JTable tbData;
    private javax.swing.JTable tbObservations;
    // End of variables declaration//GEN-END:variables
}
